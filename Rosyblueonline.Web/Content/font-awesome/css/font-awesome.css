ommon variables
parse_args() {
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	if [ -z $1 ]; then
		NAME=''
	else
		NAME=$1
	fi
	BRANCH=$PREFIX$NAME
}

parse_remote_name() {
	# Parse arguments
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	if [ -z $1 ]; then
		REMOTE=''
	else
		REMOTE=$1
	fi

	if [ -z $2 ]; then
		NAME=''
	else
		NAME=$2
	fi
	BRANCH=$PREFIX$NAME
}

cmd_start() {
	OPTIONS_SPEC="\
git flow feature start [-h] [-F] <name> [<base>]

Start new feature <name>, optionally basing it on <base> instead of <develop>
--
h,help!          Show this help
showcommands!    Show git commands while executing them
F,[no]fetch      Fetch from origin before performing local operation
"
	local base

	# Define flags
	DEFINE_boolean 'fetch' false 'fetch from origin before performing local operation' F

	# Override defaults with values from config
	gitflow_override_flag_boolean   "feature.start.fetch"   "fetch"

	# Parse arguments
	parse_args "$@"
	eval set -- "${FLAGS_ARGV}"
	base=${2:-$DEVELOP_BRANCH}

	require_base_is_local_branch "$base"
	gitflow_require_name_arg
	gitflow_config_set_base_branch $base $BRANCH

	# Update the local repo with remote changes, if asked
	if flag fetch; then
		git_fetch_branch "$ORIGIN" "$base"
	fi

	# Sanity checks
	require_branch_absent "$BRANCH"

	# If the origin branch counterpart exists, assert that the local branch
	# isn't behind it (to avoid unnecessary rebasing)
	if git_remote_branch_exists "$ORIGIN/$base"; then
		require_branches_equal "$base" "$ORIGIN/$base"
	fi

	run_pre_hook "$NAME" "$ORIGIN" "$BRANCH" "$base"


	# create branch
	git_do checkout -b "$BRANCH" "$base" || die "Could not create feature branch '$BRANCH'."

	run_post_hook "$NAME" "$ORIGIN" "$BRANCH" "$base"

	echo
	echo "Summary of actions:"
	echo "- A new branch '$BRANCH' was created, based on '$base'"
	echo "- You are now on branch '$(git_current_branch)'"
	echo ""
	echo "Now, start committing on your feature. When done, use:"
	echo ""
	echo "     git flow feature finish $NAME"
	echo
}

cmd_finish() {
	OPTIONS_SPEC="\
git flow feature finish [-h] [-F] [-r] [-p] [-k] [-D] [-S] [--no-ff] <name|nameprefix>

Finish feature <name>
--
h,help!                Show this help
showcommands!          Show git commands while executing them
F,[no]fetch            Fetch from origin before performing finish
r,[no]rebase           Rebase before merging
p,[no]preserve-merges  Preserve merges while rebasing
[no]push               Push to origin after performing finish
k,[no]keep             Keep branch after performing finish
keepremote!        	   Keep the remote branch
keeplocal!             Keep the local branch
D,[no]force_delete     Force delete feature branch after finish
S,[no]squash           Squash feature during merge
no-ff!                 Never fast-forward during the merge
"
	local finish_base

	# Define flags
	DEFINE_boolean 'fetch' false "fetch from $ORIGIN before performing finish" F
	DEFINE_boolean 'rebase' false "rebase before merging" r
	DEFINE_boolean 'preserve-merges' false 'try to recreate merges while rebasing' p
	DEFINE_boolean 'push' false "push to $ORIGIN after performing finish"
	DEFINE_boolean 'keep' false "keep branch after performing finish" k
	DEFINE_boolean 'keepremote' false "keep the remote branch"
	DEFINE_boolean 'keeplocal' false "keep the local branch"
	DEFINE_boolean 'force_delete' false "force delete feature branch after finish" D
	DEFINE_boolean 'squash' false "squash feature during merge" S
	DEFINE_boolean 'squash-info' false "add branch info during squash"
	DEFINE_boolean 'no-ff!' false "Don't fast-forward ever during merge "

	# Override defaults with values from config
	gitflow_override_flag_boolean   "feature.finish.fetch"             "fetch"
	gitflow_override_flag_boolean   "feature.finish.rebase"            "rebase"
	gitflow_override_flag_boolean   "feature.finish.preserve-merges"   "preserve_merges"
	gitflow_override_flag_boolean   "feature.finish.push"              "push"
	gitflow_override_flag_boolean   "feature.finish.keep"              "keep"
	gitflow_override_flag_boolean   "feature.finish.keepremote"        "keepremote"
	gitflow_override_flag_boolean   "feature.finish.keeplocal"         "keeplocal"
	gitflow_override_flag_boolean   "feature.finish.force-delete"      "force_delete"
	gitflow_override_flag_boolean   "feature.finish.squash"            "squash"
	gitflow_override_flag_boolean   "feature.finish.squash-info"       "squash_info"
	gitflow_override_flag_boolean   "feature.finish.no-ff"             "no_ff"

	# Parse arguments
	parse_args "$@"

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi

	# Keeping both branches implies the --keep flag to be true.
	if flag keepremote && flag keeplocal; then
		FLAGS_keep=$FLAGS_TRUE
	fi

	# Sanity checks
	require_branch "$BRANCH"

	BASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)
	BASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}
	git_local_branch_exists "$BASE_BRANCH" || die "The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't finish the feature branch '$BRANCH'."

	# Detect if we're restoring from a merge conflict
	if [ -f "$DOT_GIT_DIR/.gitflow/MERGE_BASE" ]; then
		#
		# TODO: detect that we're working on the correct branch here!
		# The user need not necessarily have given the same $NAME twice here
		# (although he/she should).
		#

		# TODO: git_is_clean_working_tree() should provide an alternative
		# exit code for "unmerged changes in working tree", which we should
		# actually be testing for here
		if git_is_clean_working_tree; then
			finish_base=$(cat "$DOT_GIT_DIR/.gitflow/MERGE_BASE")

			# Since the working tree is now clean, either the user did a
			# successful merge manually, or the merge was cancelled.
			# We detect this using git_is_branch_merged_into()
			if git_is_branch_merged_into "$BRANCH" "$finish_base"; then
				rm -f "$DOT_GIT_DIR/.gitflow/MERGE_BASE"
				helper_finish_cleanup
				exit 0
			else
				# If the user cancelled the merge and decided to wait until
				# later,that's fine. But we have to acknowledge this by
				# removing the MERGE_BASE file and continuing normal execution
				# of the finish
				rm -f "$DOT_GIT_DIR/.gitflow/MERGE_BASE"
			fi
		else
			echo
			echo "Merge conflicts not resolved yet, use:"
			echo "    git mergetool"
			echo "    git commit"
			echo
			echo "You can then complete the finish by running it again:"
			echo "    git flow feature finish $NAME"
			echo
			exit 1
		fi
	fi

	# Sanity checks
	require_clean_working_tree

	# We always fetch the Branch from Origin
	# This is done to avoid possible commits on the remote that are not
	# merged into the local branch
	if git_remote_branch_exists "$ORIGIN/$BRANCH"; then
		git_fetch_branch "$ORIGIN" "$BRANCH"
	fi

	# Update local branches with remote branches
	if flag fetch; then
		git_fetch_branch "$ORIGIN" "$BASE_BRANCH"
	fi

	# Check if the local branches have all the commits from the remote branches
	if git_remote_branch_exists "$ORIGIN/$BRANCH"; then
			require_branches_equal "$BRANCH" "$ORIGIN/$BRANCH"
	fi
	if git_remote_branch_exists "$ORIGIN/$BASE_BRANCH"; then
		require_branches_equal "$BASE_BRANCH" "$ORIGIN/$BASE_BRANCH"
	fi

	run_pre_hook "$NAME" "$ORIGIN" "$BRANCH"

	# If the user wants to rebase, do that first
	if flag rebase; then
		local _rebase_opts=""
		if flag preserve_merges; then
			_rebase_opts="$_rebase_opts -p"
		fi
		if flag showcommands; then
			_rebase_opts="$_rebase_opts --showcommands"
		fi
		if ! git flow feature rebase $_rebase_opts "$NAME"; then
			warn "Finish was aborted due to conflicts during rebase."
			warn "Please finish the rebase manually now."
			warn "When finished, re-run:"
			warn "    git flow feature finish '$NAME' '$BASE_BRANCH'"
			exit 1
		fi
	fi

	# Merge into BASE
	git_do checkout "$BASE_BRANCH" || die "Could not check out branch '$BASE_BRANCH'."

	if noflag squash; then
		if flag no_ff; then
			git_do merge --no-ff "$BRANCH"
		else
			if [ "$(git rev-list -n2 "$BASE_BRANCH..$BRANCH" | wc -l)" -eq 1 ]; then
				git_do merge --ff "$BRANCH"
			else
				git_do merge --no-ff "$BRANCH"
			fi
		fi
	else
		git_do merge --squash "$BRANCH"
		flag squash_info && gitflow_create_squash_message "Merged feature branch '$BRANCH'" "$BASE_BRANCH" "$BRANCH" > "$DOT_GIT_DIR/SQUASH_MSG"
		git_do commit
	fi

	if [ $? -ne 0 ]; then
		# Oops.. we have a merge conflict!
		# Write the given $BASE_BRANCH to a temporary file as we will
		# be needing it later.
		mkdir -p "$DOT_GIT_DIR/.gitflow"
		echo "$BASE_BRANCH" > "$DOT_GIT_DIR/.gitflow/MERGE_BASE"
		echo
		echo "There were merge conflicts. To resolve the merge conflict manually, use:"
		echo "    git mergetool"
		echo "    git commit"
		echo
		echo "You can then complete the finish by running it again:"
		echo "    git flow feature finish $NAME"
		echo
		exit 1
	fi

	run_post_hook "$NAME" "$ORIGIN" "$BRANCH"

	# When no merge conflict is detected, just clean up the feature branch
	gitflow_config_remove_base_branch "$BRANCH"
	helper_finish_cleanup
}

helper_finish_cleanup() {
	local keepmsg remotebranchdeleted localbranchdeleted

	# Sanity checks
	require_branch "$BRANCH"
	require_clean_working_tree

	remotebranchdeleted=$FLAGS_FALSE
	localbranchdeleted=$FLAGS_FALSE

	if noflag keep; then

		# Always delete remote first
		if noflag keepremote;then
			if git_remote_branch_exists "$ORIGIN/$BRANCH"; then
				git_remote_branch_delete "$BRANCH" && remotebranchdeleted=$FLAGS_TRUE
			fi
		fi

		# Delete local after remote to avoid warnings
		if noflag keeplocal; then
			if [ "$BRANCH" = "$(git_current_branch)" ]; then
				git_do checkout "$BASE_BRANCH" || die "Could not check out branch '$BASE_BRANCH'."
			fi
			if flag force_delete; then
				git_do branch -D "$BRANCH" && localbranchdeleted=$FLAGS_TRUE
			else
				if noflag squash; then
					git_do branch -d "$BRANCH" && localbranchdeleted=$FLAGS_TRUE
				else
					git_do branch -D "$BRANCH" && localbranchdeleted=$FLAGS_TRUE
				fi
			fi
		fi

		# no more branches: we can safely remove config section
		if ! git_remote_branch_exists "$ORIGIN/$BRANCH" -a ! git_local_branch_exists "$BRANCH"; then
			gitflow_config_remove_base_section "$BRANCH"
		fi
	fi

	if flag push; then
		git_do push "$ORIGIN" "$BASE_BRANCH" || die "Could not push branch '$BASE_BRANCH' to remote '$ORIGIN'."
	fi

	echo
	echo "Summary of actions:"
	echo "- The feature branch '$BRANCH' was merged into '$BASE_BRANCH'"
	#echo "- Merge conflicts were resolved"		# TODO: Add this line when it's supported
	if noflag keep; then
		if [ $localbranchdeleted -eq $FLAGS_TRUE ]; then
			keepmsg="has been locally deleted"
		else
			keepmsg="is still locally available"
		fi
		if [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then
			keepmsg=$keepmsg"; it has been remotely deleted from '$ORIGIN'"
		elif git_remote_branch_exists "$ORIGIN/$BRANCH"; then
			keepmsg=$keepmsg"; it is still remotely available on '$ORIGIN'"
		fi
	else
		keepmsg="is still locally available"
		if git_remote_branch_exists "$ORIGIN/$BRANCH"; then
			keepmsg=$keepmsg"; it is still remotely available on '$ORIGIN'"
		fi
	fi
	echo "- Feature branch '$BRANCH' "$keepmsg
	echo "- You are now on branch '$(git_current_branch)'"
	echo
}

cmd_publish() {
	OPTIONS_SPEC="\
git flow feature publish [-h] [<name>]

Publish feature branch <name> on $ORIGIN.
When <name> is omitted the current branch is used, but only if it's a feature branch.
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	# Parse arguments
	parse_args "$@"

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi


	# Sanity checks
	require_clean_working_tree
	require_branch "$BRANCH"
	git_do fetch -q "$ORIGIN" || die "Could not fetch branch '$BRANCH' from remote '$ORIGIN'."
	require_branch_absent "$ORIGIN/$BRANCH"

	run_pre_hook "$NAME" "$ORIGIN" "$BRANCH"

	# Create remote branch with remote tracking
	git_do push -u "$ORIGIN" "$BRANCH:$BRANCH"
	git_do fetch -q "$ORIGIN" "$BRANCH" || die "Could not fetch branch '$BRANCH' from remote '$ORIGIN'."
	git_do checkout "$BRANCH" || die "Could not check out branch '$BRANCH'."

	run_post_hook "$NAME" "$ORIGIN" "$BRANCH"

	echo
	echo "Summary of actions:"
	echo "- The remote branch '$BRANCH' was created or updated"
	echo "- The local branch '$BRANCH' was configured to track the remote branch"
	echo "- You are now on branch '$(git_current_branch)'"
	echo
}

cmd_track() {
	OPTIONS_SPEC="\
git flow feature track [-h] <name>

Start tracking feature <name> that is shared on $ORIGIN
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	# Parse arguments
	parse_args "$@"

	gitflow_require_name_arg

	# Sanity checks
	require_clean_working_tree
	require_local_branch_absent "$BRANCH"

	run_pre_hook "$NAME" "$ORIGIN" "$BRANCH"

	git_do fetch -q "$ORIGIN" || die "Could not fetch branch '$BRANCH' from remote '$ORIGIN'."
	git_remote_branch_exists "$ORIGIN/$BRANCH"

	# Create tracking branch
	git_do checkout -b "$BRANCH" "$ORIGIN/$BRANCH" || die "Could not create '$BRANCH'."

	run_post_hook "$NAME" "$ORIGIN" "$BRANCH"

	echo
	echo "Summary of actions:"
	echo "- A new remote tracking branch '$BRANCH' was created"
	echo "- You are now on branch '$(git_current_branch)'"
	echo
}

cmd_diff() {
	OPTIONS_SPEC="\
git flow feature diff [-h] [<name|nameprefix>]

Show all changes in <name> that are not in the base
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	local base

	# Parse arguments
	parse_args "$@"

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi

	base=$(gitflow_config_get_base_branch $BRANCH)
	base=${base:-$DEVELOP_BRANCH}

	git_do diff "$base..$BRANCH"
}

cmd_checkout() {
	OPTIONS_SPEC="\
git flow feature checkout [-h] [<name|nameprefix>]

Switch to feature branch <name>
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	# Parse arguments
	parse_args "$@"

	NAME=$(gitflow_resolve_nameprefix "$NAME" "$PREFIX")
	if [ $? -eq 0 ]; then
		BRANCH=$PREFIX$NAME
		git_do checkout "$BRANCH"  || die "Could not check out branch '$BRANCH'."
	fi
}

cmd_co() {
	# Alias for checkout
	cmd_checkout "$@"
}

cmd_rebase() {
	OPTIONS_SPEC="\
git flow feature rebase [-h] [-i] [-p] [<name|nameprefix>]

Rebase <name> on <base_branch>
--
h,help!                Show this help
showcommands!          Show git commands while executing them
i,[no]interactive      Do an interactive rebase
p,[no]preserve-merges  Preserve merges
"
	local opts

	# Define flags
	DEFINE_boolean 'interactive' false 'do an interactive rebase' i
	DEFINE_boolean 'preserve-merges' false 'try to recreate merges' p

	# Override defaults with values from config
	gitflow_override_flag_boolean   "feature.rebase.interactive"       "interactive"
	gitflow_override_flag_boolean   "feature.rebase.preserve-merges"   "preserve_merges"

	# Parse arguments
	parse_args "$@"

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi


	BASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)
	BASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}

	warn "Will try to rebase '$NAME' which is based on '$BASE_BRANCH'..."
	if ! git_config_bool_exists "rebase.autostash"; then
		require_clean_working_tree
	fi

	require_branch "$BRANCH"

	git_local_branch_exists "$BASE_BRANCH" || die "The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the feature branch '$BRANCH'."

	git_do checkout -q "$BRANCH"  || die "Could not check out branch '$BRANCH'."
	if flag interactive; then
		opts="$opts -i"
	fi
	if flag preserve_merges; then
		opts="$opts -p"
	fi
	git_do rebase $opts "$BASE_BRANCH"
}

avoid_accidental_cross_branch_action() {
	local current_branch

	current_branch=$(git_current_branch)
	if [ "$BRANCH" != "$current_branch" ]; then
		warn "Trying to pull from '$BRANCH' while currently on branch '$current_branch'."
		warn "To avoid unintended merges, git-flow aborted."
		return 1
	fi
	return 0
}

cmd_pull() {
	OPTIONS_SPEC="\
git flow feature pull [-h] <remote> [<name>]

Pull feature <name> from <remote>
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	local current_branch

	# Define flags
	DEFINE_boolean 'rebase' false "pull with rebase" r

	warn "The command 'git flow feature pull' will be deprecated per version 2.0.0. Use 'git flow feature track' instead."

	# Parse arguments
	parse_remote_name "$@"

	if [ -z "$REMOTE" ]; then
		die "Name a remote explicitly."
	fi

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi

	# To avoid accidentally merging different feature branches into each other,
	# die if the current feature branch differs from the requested $NAME
	# argument.
	current_branch=$(git_current_branch)
	if startswith "$current_branch" "$PREFIX"; then
		# We are on a local feature branch already, so $BRANCH must be equal to
		# the current branch
		avoid_accidental_cross_branch_action || die
	fi

	require_clean_working_tree

	run_pre_hook "$NAME" "$REMOTE" "$BRANCH"

	if git_local_branch_exists "$BRANCH"; then
		# Again, avoid accidental merges
		avoid_accidental_cross_branch_action || die

		# We already have a local branch called like this, so simply pull the
		# remote changes in
		if flag rebase; then
			if ! git_do pull --rebase -q "$REMOTE" "$BRANCH"; then
				warn "Pull was aborted. There might be conflicts during rebase or '$REMOTE' might be inaccessible."
				exit 1
			fi
		else
			git_do pull -q "$REMOTE" "$BRANCH" || die "Failed to pull from remote '$REMOTE'."
		fi

		echo "Pulled $REMOTE's changes into $BRANCH."
	else
		# Setup the local branch clone for the first time
		git_do fetch -q "$REMOTE" "$BRANCH" ||  die "Could not fetch branch '$BRANCH' from remote '$REMOTE'."     # Stores in FETCH_HEAD
		git_do branch --no-track "$BRANCH" FETCH_HEAD || die "Branch failed."
		git_do checkout -q "$BRANCH" || die "Could not check out branch '$BRANCH'."
		echo "Created local branch $BRANCH based on $REMOTE's $BRANCH."
	fi

	run_post_hook "$NAME" "$REMOTE" "$BRANCH"
}

cmd_delete() {
	OPTIONS_SPEC="\
git flow feature delete [-h] [-f] [-r] <name>

Delete a given feature branch
--
h,help!          Show this help
showcommands!    Show git commands while executing them
f,[no]force      Force deletion
r,[no]remote     Delete remote branch
"
	local current_branch

	# Define flags
	DEFINE_boolean 'force' false "force deletion" f
	DEFINE_boolean 'remote' false "delete remote branch" r

	# Override defaults with values from config
	gitflow_override_flag_boolean   "feature.delete.force"    "force"
	gitflow_override_flag_boolean   "feature.delete.remote"   "remote"

	# Parse arguments
	parse_args "$@"

	gitflow_require_name_arg

	# Sanity checks
	require_branch "$BRANCH"

	BASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)
	BASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}

	run_pre_hook "$NAME" "$ORIGIN" "$BRANCH"

	current_branch=$(git_current_branch)
	# We can't delete a branch we are on, switch to the develop branch.
	if [ "$BRANCH" = "$current_branch" ]; then
		require_clean_working_tree
		if git_local_branch_exists "$BASE_BRANCH"; then
			git_do checkout "$BASE_BRANCH"
		else
			git_do checkout "$DEVELOP_BRANCH" || die "Could not check out branch '$DEVELOP_BRANCH'."
		fi
	fi

	if git_is_branch_merged_into "$BRANCH" "$BASE_BRANCH"; then
		git_do branch -d "$BRANCH" || die "Could not delete the $BRANCH."
		if flag remote; then
			git_remote_branch_delete "$BRANCH"
		fi
	else
		if flag force; then
			git_do branch -D "$BRANCH" || die "Could not delete the $BRANCH."
			if flag remote; then
				git_remote_branch_delete "$BRANCH"
			fi
		else
			die "Feature branch '$BRANCH' has been not been merged yet. Use -f to force the deletion."
		fi
	fi

	gitflow_config_remove_base_section "$BRANCH"
	run_post_hook "$NAME" "$ORIGIN" "$BRANCH"

	echo
	echo "Summary of actions:"
	echo "- Feature branch '$BRANCH' has been deleted."
	flag remote && echo "- Feature branch '$BRANCH' in '$ORIGIN' has been deleted."
	echo "- You are now on branch '$(git_current_branch)'"
	echo
}

cmd_rename() {
	OPTIONS_SPEC="\
git flow feature rename <new_name> [<new_name>]

Rename a given feature branch
--
h,help!          Show this help
showcommands!    Show git commands while executing them
"
	gitflow_rename_branch "$@"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // iYShBZ9GnY30JN/apX+omcCvbYEqr0d1yCBD+wuYbj8=
{"ABTests":{"Tests":{"DNA-70598":"DNA-70598-ref"}},"Extensions":{"ActiveExternalExtensionsInfo":{},"ActiveWebstoreExtensionsInfo":{},"BlacklistedExtensionsInfo":{},"CVBlockedExtensionsInfo":{},"CVUnverifiableExtensionsInfo":{},"TotalCount":0},"Features":{"RemotelyEnabled":["continue-on-booking","feature-remote-updates-testing-flag","rich-hints"],"UserDecisions":{"installer-experiment-test":false,"installer-use-minimal-package":false}},"FullStatisticsCollectionEnabled":1,"InstallerId":"0bfa366a-c66d-45e8-8b9c-240088ddcfaa","IsDefaultBrowser":false,"LastInstallationGUID":"8e74b97e-5b75-4432-b5c5-5ad8db1a5db9","OSPMessageUUID":"eef8588c-e345-48cf-a539-cb14b260d06b","PageViews_map":{"SessionRestore":1,"WebPage":8},"Searches":{"https://www.google.co.in/search?client=opera&q={searchTerms}&sourceid=opera&ie={inputEncoding}&oe={outputEncoding}":{"AddressBar;PreinstalledSearch":2}},"SystemInfo":{"IsAeroGlassEnabled":true,"ScreenResolution":"1366x768","ScreenScaleFactor":100,"ScreenTouchSupport":false},"Touch":{"GroupID":"","IsConnected":false},"UI":{"BookmarkBar":{"PartnerCount":3,"TotalCount":3},"BrowserSidebar":{"Status":{"FacebookMessenger":{"IsDocked":false},"IsDarkSkin":false,"IsVisible":true,"Telegram":{"IsDocked":false},"VKontakte":{"IsDocked":false},"Whatsapp":{"IsDocked":false}}},"Impressions":{"SearchPopup":27,"SpeedDial":2,"SpeedDialSuggestions":3},"SpeedDial":{"Actions":{"http://aliexpress.com/":{"aliexpress_com_in":{"Impression":2}},"http://makemytrip.com/":{"makemytrip_com":{"Impression":2}},"http://www.agoda.com/":{"agoda_com_in":{"Impression":2}},"http://www.amazon.in/":{"amazon_in":{"Impression":2}},"http://www.facebook.com/":{"facebook":{"Impression":2}},"http://www.flipkart.com/":{"flipkart":{"Impression":2}},"https://gamezop.com/":{"gamezop_in":{"Impression":2}},"https://www.booking.com/":{"booking_in":{"Impression":2}}},"PartnerCount":8,"TotalCount":8},"StartPage":{"ExperimentalStartPageEnabled":true},"TabAverageCount":5,"Usage":{"Bookmarks_Bar_Usage":1,"Bookmarks_Usage":1,"Instant_search":1,"Password_manager_Usage":1,"WarnOnClosingMultipleTabs":true}},"Updater":{"Diagnostics":{"Common":{"ScheduledTaskRunsCount":1,"StatSendingRequestsCount":4,"UpdateRequestsCount":1}}},"consent":{"startpage_news_consent_given":false,"statistics_collection_enabled":true,"user_experience_metrics_reporting_enabled":true},"current_context":{"application":{"version":"62.0.3331.116"}}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               nt: "\f20a";
}
.fa-shekel:before,
.fa-sheqel:before,
.fa-ils:before {
  content: "\f20b";
}
.fa-meanpath:before {
  content: "\f20c";
}
.fa-buysellads:before {
  content: "\f20d";
}
.fa-connectdevelop:before {
  content: "\f20e";
}
.fa-dashcube:before {
  content: "\f210";
}
.fa-forumbee:before {
  content: "\f211";
}
.fa-leanpub:before {
  content: "\f212";
}
.fa-sellsy:before {
  content: "\f213";
}
.fa-shirtsinbulk:before {
  content: "\f214";
}
.fa-simplybuilt:before {
  content: "\f215";
}
.fa-skyatlas:before {
  content: "\f216";
}
.fa-cart-plus:before {
  content: "\f217";
}
.fa-cart-arrow-down:before {
  content: "\f218";
}
.fa-diamond:before {
  content: "\f219";
}
.fa-ship:before {
  content: "\f21a";
}
.fa-user-secret:before {
  content: "\f21b";
}
.fa-motorcycle:before {
  content: "\f21c";
}
.fa-street-view:before {
  content: "\f21d";
}
.fa-heartbeat:before {
  content: "\f21e";
}
.fa-venus:before {
  content: "\f221";
}
.fa-mars:before {
  content: "\f222";
}
.fa-mercury:before {
  content: "\f223";
}
.fa-intersex:before,
.fa-transgender:before {
  content: "\f224";
}
.fa-transgender-alt:before {
  content: "\f225";
}
.fa-venus-double:before {
  content: "\f226";
}
.fa-mars-double:before {
  content: "\f227";
}
.fa-venus-mars:before {
  content: "\f228";
}
.fa-mars-stroke:before {
  content: "\f229";
}
.fa-mars-stroke-v:before {
  content: "\f22a";
}
.fa-mars-stroke-h:before {
  content: "\f22b";
}
.fa-neuter:before {
  content: "\f22c";
}
.fa-genderless:before {
  content: "\f22d";
}
.fa-facebook-official:before {
  content: "\f230";
}
.fa-pinterest-p:before {
  content: "\f231";
}
.fa-whatsapp:before {
  content: "\f232";
}
.fa-server:before {
  content: "\f233";
}
.fa-user-plus:before {
  content: "\f234";
}
.fa-user-times:before {
  content: "\f235";
}
.fa-hotel:before,
.fa-bed:before {
  content: "\f236";
}
.fa-viacoin:before {
  content: "\f237";
}
.fa-train:before {
  content: "\f238";
}
.fa-subway:before {
  content: "\f239";
}
.fa-medium:before {
  content: "\f23a";
}
.fa-yc:before,
.fa-y-combinator:before {
  content: "\f23b";
}
.fa-optin-monster:before {
  content: "\f23c";
}
.fa-opencart:before {
  content: "\f23d";
}
.fa-expeditedssl:before {
  content: "\f23e";
}
.fa-battery-4:before,
.fa-battery-full:before {
  content: "\f240";
}
.fa-battery-3:before,
.fa-battery-three-quarters:before {
  content: "\f241";
}
.fa-battery-2:before,
.fa-battery-half:before {
  content: "\f242";
}
.fa-battery-1:before,
.fa-battery-quarter:before {
  content: "\f243";
}
.fa-battery-0:before,
.fa-battery-empty:before {
  content: "\f244";
}
.fa-mouse-pointer:before {
  content: "\f245";
}
.fa-i-cursor:before {
  content: "\f246";
}
.fa-object-group:before {
  content: "\f247";
}
.fa-object-ungroup:before {
  content: "\f248";
}
.fa-sticky-note:before {
  content: "\f249";
}
.fa-sticky-note-o:before {
  content: "\f24a";
}
.fa-cc-jcb:before {
  content: "\f24b";
}
.fa-cc-diners-club:before {
  content: "\f24c";
}
.fa-clone:before {
  content: "\f24d";
}
.fa-balance-scale:before {
  content: "\f24e";
}
.fa-hourglass-o:before {
  content: "\f250";
}
.fa-hourglass-1:before,
.fa-hourglass-start:before {
  content: "\f251";
}
.fa-hourglass-2:before,
.fa-hourglass-half:before {
  content: "\f252";
}
.fa-hourglass-3:before,
.fa-hourglass-end:before {
  content: "\f253";
}
.fa-hourglass:before {
  content: "\f254";
}
.fa-hand-grab-o:before,
.fa-hand-rock-o:before {
  content: "\f255";
}
.fa-hand-stop-o:before,
.fa-hand-paper-o:before {
  content: "\f256";
}
.fa-hand-scissors-o:before {
  content: "\f257";
}
.fa-hand-lizard-o:before {
  content: "\f258";
}
.fa-hand-spock-o:before {
  content: "\f259";
}
.fa-hand-pointer-o:before {
  content: "\f25a";
}
.fa-hand-peace-o:before {
  content: "\f25b";
}
.fa-trademark:before {
  content: "\f25c";
}
.fa-registered:before {
  content: "\f25d";
}
.fa-creative-commons:before {
  content: "\f25e";
}
.fa-gg:before {
  content: "\f260";
}
.fa-gg-circle:before {
  content: "\f261";
}
.fa-tripadvisor:before {
  content: "\f262";
}
.fa-odnoklassniki:before {
  content: "\f263";
}
.fa-odnoklassniki-square:before {
  content: "\f264";
}
.fa-get-pocket:before {
  content: "\f265";
}
.fa-wikipedia-w:before {
  content: "\f266";
}
.fa-safari:before {
  content: "\f267";
}
.fa-chrome:before {
  content: "\f268";
}
.fa-firefox:before {
  content: "\f269";
}
.fa-opera:before {
  content: "\f26a";
}
.fa-internet-explorer:before {
  content: "\f26b";
}
.fa-tv:before,
.fa-television:before {
  content: "\f26c";
}
.fa-contao:before {
  content: "\f26d";
}
.fa-500px:before {
  content: "\f26e";
}
.fa-amazon:before {
  content: "\f270";
}
.fa-calendar-plus-o:before {
  content: "\f271";
}
.fa-calendar-minus-o:before {
  content: "\f272";
}
.fa-calendar-times-o:before {
  content: "\f273";
}
.fa-calendar-check-o:before {
  content: "\f274";
}
.fa-industry:before {
  content: "\f275";
}
.fa-map-pin:before {
  content: "\f276";
}
.fa-map-signs:before {
  content: "\f277";
}
.fa-map-o:before {
  content: "\f278";
}
.fa-map:before {
  content: "\f279";
}
.fa-commenting:before {
  content: "\f27a";
}
.fa-commenting-o:before {
  content: "\f27b";
}
.fa-houzz:before {
  content: "\f27c";
}
.fa-vimeo:before {
  content: "\f27d";
}
.fa-black-tie:before {
  content: "\f27e";
}
.fa-fonticons:before {
  content: "\f280";
}
